[{"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/index.js":"1","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/App.js":"2","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/store/store.js":"3","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/store/actions.js":"4","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/store/reducers.js":"5","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/store/sagas.js":"6","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/pages/AuthPage.js":"7","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/pages/HomePage.js":"8","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/Layout/Layout.js":"9","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/Profile/UserProfile.js":"10","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/Layout/MainNavigation.js":"11","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/Profile/ProfileForm.js":"12","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/Auth/AuthForm.js":"13","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/StartingPageContent.js":"14","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/Entries.js":"15","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/PostEntry.js":"16","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/EntryList.js":"17","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/EntryCard.js":"18","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/EntryMenu.js":"19"},{"size":301,"mtime":1667310266118,"results":"20","hashOfConfig":"21"},{"size":1997,"mtime":1668701613015,"results":"22","hashOfConfig":"21"},{"size":461,"mtime":1667913551919,"results":"23","hashOfConfig":"21"},{"size":2345,"mtime":1668088362646,"results":"24","hashOfConfig":"21"},{"size":4773,"mtime":1668691706088,"results":"25","hashOfConfig":"21"},{"size":9188,"mtime":1669888424879,"results":"26","hashOfConfig":"21"},{"size":130,"mtime":1648643396000,"results":"27","hashOfConfig":"21"},{"size":171,"mtime":1668082963127,"results":"28","hashOfConfig":"21"},{"size":219,"mtime":1665658008195,"results":"29","hashOfConfig":"21"},{"size":278,"mtime":1667924090863,"results":"30","hashOfConfig":"21"},{"size":1097,"mtime":1669110021969,"results":"31","hashOfConfig":"21"},{"size":2516,"mtime":1668701689139,"results":"32","hashOfConfig":"21"},{"size":2707,"mtime":1666865220379,"results":"33","hashOfConfig":"21"},{"size":1234,"mtime":1668084943337,"results":"34","hashOfConfig":"21"},{"size":4237,"mtime":1668701025812,"results":"35","hashOfConfig":"21"},{"size":7505,"mtime":1668701870362,"results":"36","hashOfConfig":"21"},{"size":235,"mtime":1668689364363,"results":"37","hashOfConfig":"21"},{"size":3167,"mtime":1668701804147,"results":"38","hashOfConfig":"21"},{"size":568,"mtime":1668089787187,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1228vrf",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/index.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/App.js",["83"],"import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  createBrowserRouter,\n  createRoutesFromElements,\n  Navigate,\n  Route,\n  RouterProvider,\n} from \"react-router-dom\";\n\nimport Layout from \"./components/Layout/Layout\";\nimport UserProfile from \"./components/Profile/UserProfile\";\nimport AuthPage from \"./pages/AuthPage\";\nimport HomePage from \"./pages/HomePage\";\nimport { getUserData } from \"./store/actions\";\n\nconst App = () => {\n  const isLoggedIn = useSelector((state) => state.usersReducer.isLoggedIn);\n\n  const router = createBrowserRouter(\n    createRoutesFromElements(\n      <Route path=\"/\" element={<Layout />}>\n        <Route path=\"/\" element={<HomePage />} />\n        <Route\n          path=\"/auth\"\n          element={!isLoggedIn ? <AuthPage /> : <Navigate replace to={\"/\"} />}\n        />\n        <Route\n          path=\"/profile\"\n          element={\n            isLoggedIn ? (\n              <UserProfile />\n            ) : (\n              <Navigate replace={true} to={\"/auth\"} />\n            )\n          }\n        />\n        <Route path=\"*\" element={<Navigate replace={true} to={\"/\"} />} />\n      </Route>\n    )\n  );\n\n  // get user data from cookie\n\n  const dispatch = useDispatch();\n\n  const checkCookie = () => {\n    let dc = document.cookie;\n    let prefix = \"token=\";\n    let begin = dc.indexOf(\"; \" + prefix);\n    if (begin === -1) {\n      begin = dc.indexOf(prefix);\n      if (begin !== 0) return null;\n    } else {\n      begin += 2;\n      var end = document.cookie.indexOf(\";\", begin);\n      if (end === -1) {\n        end = dc.length;\n      }\n    }\n    return decodeURI(dc.substring(begin + prefix.length, end));\n  };\n\n  const manageCookie = () => {\n    let token = checkCookie();\n    if (token !== null && token !== undefined && token !== \"undefined\") {\n      dispatch(getUserData(token));\n    }\n  };\n\n  useEffect(() => {\n    manageCookie();\n  }, [manageCookie]);\n\n  return <RouterProvider router={router} />;\n};\n\nexport default App;\n","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/store/store.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/store/actions.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/store/reducers.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/store/sagas.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/pages/AuthPage.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/pages/HomePage.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/Layout/Layout.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/Profile/UserProfile.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/Layout/MainNavigation.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/Profile/ProfileForm.js",["84"],"import { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { postChangePassword } from \"../../store/actions\";\nimport classes from \"./ProfileForm.module.css\";\n\nconst ProfileForm = () => {\n  const token = useSelector((state) => state.usersReducer.token);\n  const isLoading = useSelector((state) => state.usersReducer.isLoading);\n  const usersResponse = useSelector((state) => state.usersReducer.response);\n  const [firstToken] = useState(token);\n\n  const dispatch = useDispatch();\n\n  const navigate = useNavigate();\n\n  const [validationMessage, setValidationMessage] = useState(null);\n  const [isSucceeded, setIsSucceeded] = useState(false);\n\n  useEffect(() => {\n    if (firstToken !== token) {\n      setIsSucceeded(true);\n      const foo = () => {\n        navigate(\"/\");\n      };\n      setTimeout(foo, 1000);\n    }\n  }, [token, navigate]);\n\n  const newPassRef = useRef();\n  const newPassConfRef = useRef();\n\n  const changePasswordHandler = (event) => {\n    event.preventDefault();\n\n    if (newPassRef.current.value === newPassConfRef.current.value) {\n      setValidationMessage(null);\n      const enteredObject = {\n        token: token,\n        password: newPassRef.current.value,\n      };\n\n      dispatch(postChangePassword(enteredObject));\n    } else {\n      setValidationMessage(\"Passwords entered in the fields must be same\");\n    }\n  };\n\n  return (\n    <>\n      {usersResponse.error && <h3>Error: {usersResponse.error.message}</h3>}\n      {validationMessage && <h3>{validationMessage}</h3>}\n      {isLoading || (isSucceeded && <h3> </h3>)}\n      {isSucceeded && <h3>Password has been changed.</h3>}\n      <form className={classes.form}>\n        <div className={classes.control}>\n          <label htmlFor=\"new-password\">New Password</label>\n          <input\n            type=\"password\"\n            id=\"new-password\"\n            minLength=\"7\"\n            ref={newPassRef}\n          />\n          <label htmlFor=\"new-password-confirm\">Confirm New Password</label>\n          <input\n            type=\"password\"\n            id=\"new-password-confirm\"\n            minLength=\"7\"\n            ref={newPassConfRef}\n          />\n        </div>\n        <div className={classes.action}>\n          {isLoading ? (\n            \"Working on it...\"\n          ) : (\n            <button onClick={changePasswordHandler}>Change Password</button>\n          )}\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default ProfileForm;\n","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/Auth/AuthForm.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/StartingPageContent.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/Entries.js",["85","86","87","88","89"],"import classes from \"./StartingPageContent.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { getItemsFetch } from \"../../store/actions\";\nimport PostEntry from \"./PostEntry\";\nimport EntryList from \"./EntryList\";\n\nconst Entries = () => {\n  const items = useSelector((state) => state.itemsReducer.items);\n  const uid = useSelector((state) => state.usersReducer.uid);\n  const token = useSelector((state) => state.usersReducer.token);\n  const isLoggedIn = useSelector((state) => state.usersReducer.isLoggedIn);\n  const itemsErrorResponse = useSelector(\n    (state) => state.itemsReducer.response\n  );\n  const isItemsLoading = useSelector((state) => state.itemsReducer.isLoading);\n\n  const date = new Date();\n  const shortdate = date.toDateString();\n\n  const [isPostOpen, setIsPostOpen] = useState(false);\n  const [visibleItems, setVisibleItems] = useState([]);\n  const [showState, setShowState] = useState(\"UNCOMPLETED\");\n\n  const today = date.toDateString().split(\" \")[0];\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setTimeout(() => {\n      dispatch(getItemsFetch({ uid: uid, token: token }));\n    }, 100);\n  }, [dispatch]);\n\n  useEffect(() => {\n    switch (showState) {\n      case \"ALL\":\n        return setVisibleItems(items);\n      case \"UNCOMPLETED\":\n        let newItems = items.filter(\n          (element) => element[Object.keys(element)]?.completion !== shortdate\n        );\n        newItems = newItems.filter((element) =>\n          element[Object.keys(element)]?.days.includes(today)\n        );\n        return setVisibleItems(newItems);\n      case \"COMPLETED\":\n        return setVisibleItems(\n          items.filter(\n            (element) => element[Object.keys(element)]?.completion === shortdate\n          )\n        );\n    }\n  }, [items, showState]);\n\n  const handleShowCompleted = () => {\n    if (showState === \"UNCOMPLETED\") {\n      setShowState(\"COMPLETED\");\n    } else setShowState(\"UNCOMPLETED\");\n  };\n\n  const handleShowAll = () => {\n    setShowState(\"ALL\");\n  };\n\n  const userLocale =\n    navigator.languages && navigator.languages.length\n      ? navigator.languages[0]\n      : navigator.language;\n  const locale = userLocale ? userLocale : \"en-us\";\n  const localDate = date.toLocaleDateString(locale, {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  });\n\n  return (\n    <>\n      <section className={classes.starting}>\n        <div className={classes.message}>\n          <h1>Hello! Today:</h1> <h2>{localDate}</h2>\n        </div>\n        {isItemsLoading && (\n          <div className={classes.boxes}>\n            <div className={classes.control}>\n              <label>Loading...</label>\n            </div>\n          </div>\n        )}\n        {itemsErrorResponse.error && (\n          <div className={classes.boxes}>\n            <div className={classes.control}>\n              <label>{`Error: ${itemsErrorResponse.error.message}`}</label>\n            </div>\n          </div>\n        )}\n        <>\n          <div className={classes.boxes}>\n            <div\n              className={`${classes.actions} ${classes.flex} ${classes.spacebetween}`}\n            >\n              <div className={classes.flex}>\n                <button onClick={handleShowCompleted}>\n                  {showState === \"UNCOMPLETED\"\n                    ? \"Completed Entries\"\n                    : \"Uncompleted Entries\"}\n                </button>\n                <button onClick={handleShowAll}>All Entries</button>\n              </div>\n              <div className={classes.flex}>\n                <button onClick={() => setIsPostOpen((prev) => !prev)}>\n                  {isPostOpen ? \"Close\" : \"Add a New Entry\"}\n                </button>\n              </div>\n            </div>\n            {isPostOpen && <PostEntry style=\"WIDE\" method=\"POST\" />}\n          </div>\n          <div className={classes.boxes}>\n            <div className={classes.control}>\n              {items.length === 0 && (\n                <span>No entires yet. Add some to start now.</span>\n              )}\n            </div>\n            <EntryList items={visibleItems} />\n          </div>\n        </>\n      </section>\n    </>\n  );\n};\n\nexport default Entries;\n","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/PostEntry.js",["90","91","92"],"import classes from \"./StartingPageContent.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { postItemFetch, putItemFetch } from \"../../store/actions\";\nimport { useRef, useState } from \"react\";\nimport { useEffect } from \"react\";\n\nexport const daylist = [\n  { id: \"1\", name: \"Mon\" },\n  { id: \"2\", name: \"Tue\" },\n  { id: \"3\", name: \"Wed\" },\n  { id: \"4\", name: \"Thu\" },\n  { id: \"5\", name: \"Fri\" },\n  { id: \"6\", name: \"Sat\" },\n  { id: \"7\", name: \"Sun\" },\n];\n\nconst PostEntry = ({ style, method, setIsEdit, id, item }) => {\n  const uid = useSelector((state) => state.usersReducer.uid);\n  const token = useSelector((state) => state.usersReducer.token);\n  const isItemsLoading = useSelector((state) => state.itemsReducer.isLoading);\n  const itemsErrorResponse = useSelector(\n    (state) => state.itemsReducer.response\n  );\n\n  const dispatch = useDispatch();\n\n  const [isCheckAll, setIsCheckAll] = useState(false);\n  const [isCheck, setIsCheck] = useState([]);\n  const [isContentValid, setIsContentValid] = useState(false);\n\n  const contentRef = useRef();\n\n  const list = daylist;\n\n  const validationHandler = () => {\n    contentRef.current.value.length < 3\n      ? setIsContentValid(false)\n      : setIsContentValid(true);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    if (isContentValid && isCheck.length > 0) {\n      switch (method) {\n        case \"POST\":\n          const enteredObject = {\n            method: \"POST\",\n            uid: uid,\n            token: token,\n            content: contentRef.current.value,\n            days: isCheck,\n          };\n\n          return dispatch(postItemFetch(enteredObject));\n        case \"EDIT\":\n          const entObject = {\n            method: \"EDIT\",\n            name: id,\n            uid: uid,\n            token: token,\n            content: contentRef.current.value,\n            days: isCheck,\n          };\n\n          return dispatch(putItemFetch(entObject));\n      }\n    }\n  };\n\n  const handleSelectAll = (e) => {\n    setIsCheckAll(!isCheckAll);\n    setIsCheck(list.map((li) => li.name));\n    if (isCheckAll) {\n      setIsCheck([]);\n    }\n    validationHandler();\n  };\n\n  const handleClick = (e) => {\n    const { name, checked } = e.target;\n    if (checked) {\n      setIsCheck([...isCheck, name]);\n    } else {\n      setIsCheck(isCheck.filter((item) => item !== name));\n    }\n    validationHandler();\n  };\n\n  const cancelHandler = (event) => {\n    event.preventDefault();\n    setIsEdit((prev) => !prev);\n  };\n\n  useEffect(() => {\n    if (item !== undefined) {\n      setIsCheck(Object.values(item)[0].days);\n      contentRef.current.value = Object.values(item)[0].content;\n      if (Object.values(item)[0].days.length === 7) {\n        setIsCheckAll(true);\n      }\n    }\n  }, []);\n\n  const didMountRef = useRef(false);\n\n  useEffect(() => {\n    if (didMountRef.current) {\n      if (setIsEdit && !isItemsLoading) {\n        setIsEdit(false);\n      }\n    }\n    didMountRef.current = true;\n  }, [isItemsLoading]);\n\n  return (\n    <>\n      {style === \"WIDE\" ? (\n        <section className={`${classes.control} ${classes.formborder}`}>\n          {isItemsLoading && <span>Loading...</span>}\n          {itemsErrorResponse.error && (\n            <span>{`Error: ${itemsErrorResponse.error.message}`}</span>\n          )}\n          <form>\n            <div className={classes.control}>\n              <label htmlFor=\"content\">Habit Name</label>\n              <input\n                type=\"content\"\n                id=\"content\"\n                required\n                ref={contentRef}\n                onChange={validationHandler}\n              />\n            </div>\n            <div className={classes.control}>\n              <div className={classes.dcall}>\n                <div className={classes.dcheckbox}>\n                  <label htmlFor=\"check-all\">Select All Days</label>\n                  <input\n                    id=\"check-all\"\n                    type=\"checkbox\"\n                    onChange={handleSelectAll}\n                    checked={isCheck.length === 7}\n                  />\n                </div>\n              </div>\n              <div className={classes.dchecklist}>\n                {list.map((element) => {\n                  return (\n                    <div key={element.id} className={classes.dcheckbox}>\n                      <label htmlFor={element.id}>{element.name}</label>\n                      <input\n                        id={element.id}\n                        name={element.name}\n                        type=\"checkbox\"\n                        onChange={handleClick}\n                        checked={isCheck.includes(element.name)}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n            <div className={classes.actions}>\n              {isItemsLoading ? (\n                <h1>Loading...</h1>\n              ) : (\n                <button\n                  onClick={submitHandler}\n                  disabled={!isContentValid || isCheck.length < 1}\n                >\n                  SUBMIT\n                </button>\n              )}\n            </div>\n          </form>\n        </section>\n      ) : (\n        <>\n          <form>\n            <div className={classes.control}>\n              <label htmlFor=\"content\">Habit Name</label>\n              <input\n                type=\"content\"\n                id=\"content\"\n                placeholder={Object.values(item)[0].content}\n                onChange={validationHandler}\n                required\n                ref={contentRef}\n              />\n            </div>\n            <div className={classes.control}>\n              <div className={classes.dcall}>\n                <div className={classes.dcheckbox}>\n                  <label htmlFor=\"check-all\">Select All Days</label>\n                  <input\n                    id=\"check-all\"\n                    type=\"checkbox\"\n                    onChange={handleSelectAll}\n                    checked={isCheck.length === 7}\n                  />\n                </div>\n              </div>\n              <div className={classes.dchecklist}>\n                {list.map((element) => {\n                  return (\n                    <div key={element.id} className={classes.dcheckbox}>\n                      <label htmlFor={element.id}>{element.name}</label>\n                      <input\n                        id={element.id}\n                        name={element.name}\n                        type=\"checkbox\"\n                        onChange={handleClick}\n                        checked={isCheck.includes(element.name)}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div\n              className={`${classes.actions} ${classes.flex} ${classes.center}`}\n            >\n              {isItemsLoading ? (\n                <h1>Loading...</h1>\n              ) : (\n                <>\n                  <button onClick={cancelHandler} style={{ margin: \"1rem 0\" }}>\n                    CANCEL\n                  </button>\n                  <button\n                    onClick={submitHandler}\n                    disabled={!isContentValid || isCheck.length < 1}\n                    style={{ margin: \"1rem 0\" }}\n                  >\n                    SUBMIT\n                  </button>\n                </>\n              )}\n            </div>\n          </form>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default PostEntry;\n","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/EntryList.js",[],"/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/EntryCard.js",["93"],"import classes from \"./StartingPageContent.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ReactComponent as MenuSVG } from \"../../images/menu.svg\";\nimport EntryMenu from \"./EntryMenu\";\nimport { useState } from \"react\";\nimport { putItemFetch, deleteItemFetch } from \"../../store/actions\";\nimport PostEntry from \"./PostEntry\";\n\nconst EntryCard = ({ element, i }) => {\n  const uid = useSelector((state) => state.usersReducer.uid);\n  const token = useSelector((state) => state.usersReducer.token);\n\n  const date = new Date();\n  const shortdate = date.toDateString();\n\n  const [isEdit, setIsEdit] = useState(false);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const completionHandler = (id, comp) => {\n    if (comp === shortdate) {\n      dispatch(\n        putItemFetch({\n          uid: uid,\n          token: token,\n          name: [id],\n          method: \"COMPLETION\",\n          completion: \" \",\n        })\n      );\n    } else {\n      dispatch(\n        putItemFetch({\n          uid: uid,\n          token: token,\n          name: [id],\n          method: \"COMPLETION\",\n          completion: [shortdate],\n        })\n      );\n    }\n  };\n\n  const deleteHandler = (id) => {\n    dispatch(\n      deleteItemFetch({\n        uid: uid,\n        token: token,\n        name: [id],\n      })\n    );\n  };\n\n  return (\n    <div key={i} className={classes.control}>\n      <div className={classes.entries} key={i}>\n        {isEdit ? (\n          <>\n            <PostEntry\n              style=\"SLIM\"\n              method=\"EDIT\"\n              setIsEdit={setIsEdit}\n              item={element}\n              id={[Object.keys(element)][0][0]}\n            />\n          </>\n        ) : (\n          <>\n            <div className={classes.left}>\n              <input\n                id={[Object.keys(element)][0][0]}\n                type=\"checkbox\"\n                onChange={() =>\n                  completionHandler(\n                    [Object.keys(element)][0][0],\n                    element[Object.keys(element)]?.completion\n                  )\n                }\n                checked={\n                  element[Object.keys(element)]?.completion === shortdate\n                }\n              />\n              <label htmlFor={[Object.keys(element)][0][0]}>\n                {element[Object.keys(element)].content}\n                <div className={classes.days}>\n                  {element[Object.keys(element)].days.map((day, i) => (\n                    <span key={i}>{day}</span>\n                  ))}\n                </div>\n              </label>\n            </div>\n            <div className={classes.right}>\n              <button onClick={() => setIsMenuOpen((prev) => !prev)}>\n                <MenuSVG />\n              </button>\n              {isMenuOpen && (\n                <EntryMenu\n                  deleteMethod={deleteHandler}\n                  id={[Object.keys(element)][0][0]}\n                  setIsMenuOpen={setIsMenuOpen}\n                  setIsEdit={setIsEdit}\n                />\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EntryCard;\n","/Users/bilgehanatas/Documents/Code/stdy/React/Redux-Saga-Dummy-Project/src/components/StartingPage/EntryMenu.js",[],{"ruleId":"94","severity":1,"message":"95","line":64,"column":9,"nodeType":"96","endLine":69,"endColumn":4},{"ruleId":"94","severity":1,"message":"97","line":28,"column":6,"nodeType":"98","endLine":28,"endColumn":23,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":12,"column":9,"nodeType":"102","messageId":"103","endLine":12,"endColumn":19},{"ruleId":"94","severity":1,"message":"104","line":32,"column":6,"nodeType":"98","endLine":32,"endColumn":16,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":35,"column":5,"nodeType":"108","messageId":"109","endLine":52,"endColumn":6},{"ruleId":"94","severity":1,"message":"110","line":53,"column":6,"nodeType":"98","endLine":53,"endColumn":24,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":116,"column":39,"nodeType":"114","messageId":"115","endLine":116,"endColumn":51},{"ruleId":"106","severity":1,"message":"107","line":45,"column":7,"nodeType":"108","messageId":"109","endLine":67,"endColumn":8},{"ruleId":"94","severity":1,"message":"116","line":103,"column":6,"nodeType":"98","endLine":103,"endColumn":8,"suggestions":"117"},{"ruleId":"94","severity":1,"message":"118","line":114,"column":6,"nodeType":"98","endLine":114,"endColumn":22,"suggestions":"119"},{"ruleId":"112","severity":1,"message":"113","line":61,"column":15,"nodeType":"114","messageId":"115","endLine":61,"endColumn":27},"react-hooks/exhaustive-deps","The 'manageCookie' function makes the dependencies of useEffect Hook (at line 73) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'manageCookie' in its own useCallback() Hook.","VariableDeclarator","React Hook useEffect has a missing dependency: 'firstToken'. Either include it or remove the dependency array.","ArrayExpression",["120"],"no-unused-vars","'isLoggedIn' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'token' and 'uid'. Either include them or remove the dependency array.",["121"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'shortdate' and 'today'. Either include them or remove the dependency array.",["122"],"react/style-prop-object","Style prop value must be an object","JSXAttribute","stylePropNotObject","React Hook useEffect has a missing dependency: 'item'. Either include it or remove the dependency array. If 'setIsCheck' needs the current value of 'item', you can also switch to useReducer instead of useState and read 'item' in the reducer.",["123"],"React Hook useEffect has a missing dependency: 'setIsEdit'. Either include it or remove the dependency array. If 'setIsEdit' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["124"],{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [token, navigate, firstToken]",{"range":"135","text":"136"},"Update the dependencies array to be: [dispatch, token, uid]",{"range":"137","text":"138"},"Update the dependencies array to be: [items, shortdate, showState, today]",{"range":"139","text":"140"},"Update the dependencies array to be: [item]",{"range":"141","text":"142"},"Update the dependencies array to be: [isItemsLoading, setIsEdit]",{"range":"143","text":"144"},[924,941],"[token, navigate, firstToken]",[1197,1207],"[dispatch, token, uid]",[1824,1842],"[items, shortdate, showState, today]",[2767,2769],"[item]",[2981,2997],"[isItemsLoading, setIsEdit]"]